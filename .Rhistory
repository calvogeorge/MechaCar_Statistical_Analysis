load("~/GitHub/mia-virt-data-pt-05-2021-u-b/15-R/1/01_Ins_RBasics/Solved/.RData")
q()
?ggplot()
library(dbplyr)
source("~/.active-rstudio-document")
library(ggplot2)
?ggplot()
head(mpg)
plt <- ggplot(mpg, aes(x=class)) # import dataset into ggplot2
plt + geom_bar() # plot a bar plot
?geom_bar()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups ='keep') # create a summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups ='keep') # create a summary table
library(dbplyr)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups ='keep') # create a summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
?summarize()
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarise(Vehicle_Count=n(), .groups = 'keep') #create summary table
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary table
library(tidyverse)
mpg_summary <- mpg %>% group_by(manufacturer) %>% summarize(Vehicle_Count=n(), .groups = 'keep') #create summary ta
plt <- ggplot(mpg_summary, aes(x=manufacture, y=Vehicle_Count)) #import dataset into ggplot
plt + geom_col() #plot a bar plot
> plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot
View(mpg_summary)
plt + geom_col() #plot a bar plot
plt <- ggplot(mpg_summary, aes(x=manufacturer, y=Vehicle_Count)) #import dataset into ggplot
plt + geom_col() #plot a bar plot
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") # Plot bar plot with labels
theme(axis.text.x = element_text(angle = 45,hjust = 1))
plt + geom_col() + xlab("Manufacturing Company") + ylab("Number of Vehicles in Dataset") + # Plot bar plot with labels
theme(axis.text.x=element_text(angle=45,hjust=1)) #rotate the x-axis label 45 degrees
mpg_summary <- subset(mpg, manufacturer=='toyota') %>% group_by(cyl) %>% summarize(Mean_Hwy=mean(hwy), .groups = 'keep') #create summary table
plt <- ggplot(mpg_summary,aes(x=cyl, y=Mean_Hwy)) # import dataset into ggplot
plt + geom_line() + xlab("Cylinders") + ylab("Average Highway Fuel Economy")
plt + geom_line() + xlab("Cylinders") + ylab("Average Highway Fuel Economy") + scale_x_discrete(limits=c(4,6,8)) + scale_y_continuous(breaks= c(15:30)) #add line plot with labels
plt <- ggplot(mpg, aes(x=displ,y=cty)) # import dataset into ggplot2
plt + geom_point()+ xlab("Engine Size (L)") + ylab("City Fuel-Efficiency (MPG)") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class)) #import dataset into ggplot2
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class") #add scatter plot with labels
plt <- ggplot(mpg,aes(x=displ,y=cty,color=class,size=cty,shape=drv))
plt + geom_point() + labs(x="Engine Size (L)", y="City Fuel-Efficiency (MPG)", color="Vehicle Class",shape="Type of Drive")
plt <- ggplot(mpg,aes(x=manufacture,y=hwy))
plt + geom_boxplot(outlier.colour = "red",colour = "blue")
plt+geom_boxplot()
plt <- ggplot(mpg,aes(x=manufacturer,y=hwy))
plt + geom_boxplot(outlier.colour = "red",colour = "blue")
ggplot(mtcars, aes(x=wt)) + geom_density()
?shapiro.test()
shapiro.test(mtcars$wt)
?sample_n()
population_table <- read.csv("used_car_data.csv", check.names = F, stringsAsFactors = F)
ls
setwd("C:/Users/George/Downloads")
population_table <- read.csv("used_car_data.csv", check.names = F, stringsAsFactors = F)
plt <- ggplot(population_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
plt <- ggplot(population_table, aes(x=Miles_Driven))
plt + geom_density()
sample_table <- population_table %>% slice_sample(50)
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
sample_table <- population_table %>% sample_n(50)
plt <- ggplot(sample_table, aes(x=log10(Miles_Driven)))
plt + geom_density()
t.test(log10(sample_table$Miles_Driven),mu=mean(log10(population_table$Miles_Driven)))
sample_table <- population_table %>% sample_n(50) #generate 50 randomly sampled data points
sample_table2 <- population_table %>% sample_n(50) #generate another 50 randomly sampled data points
t.test(log10(sample_table$Miles_Driven),log10(sample_table2$Miles_Driven))
?t.test()
mpg_data <- read.csv("mpg_modified.csv")
head(mpg_data)
mpg_1999 <- mpg_data %>% filter(year == 1999)
mpg_2008 <- mpg_data %>% filter(year == 2008)
t.test(mpg_1999$hwy, mpg_2008$hwy, paired = T)
?aov()
View(mpg_data)
View(mpg_2008)
View(population_table)
View(mpg_summary)
View(sample_table2)
View(sample_table)
mtcars_filt <- mtcars[,c('hp', 'cyl')] #filter columns from mtcars dataset
mtcars_filt$cyl <- factor(mtcars_filt$cyl) # convert numeric column to factor
aov (hp~cyl, data=mtcars_filt)
summary(aov(hp~cyl, data=mtcars_filt))
head(mtcars)
plt <- ggplot(mtcars,aes(x=hp, y=qsec))
plt + geom_point()
cor(mtcars$hp, mtcars$qsec)
used_cars <- read.csv("used_car_data.csv", stringsAsFactors = F)
head(used_cars)
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price)
plt + geom_point()
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price)
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price)
plt <- ggplot(used_cars, aes(x=Miles_Driven, y=Selling_Price))
plt + geom_point()
cor(used_cars$Miles_Driven, used_cars$Selling_Price)
used_matrix <- as.matrix(used_cars[,c("Selling_Price", "Present_Price","Miles_Driven")])
cor(used_matrix)
?lm()
lm(qsec~hp,mtcars)
summary(lm(qsec~hp,mtcars))
model <- lm(qsec ~ hp,mtcars)
yvals <- model$coefficients['hp']*mtcars$hp +
model$coefficients['(Intercept']
plt <- ggplot(mtcars, aes(x=hp, y=qsec))
plt + geom_point() + geom_line(aes(y=yvals), color = 'red')
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
yvals <- model$coefficients['hp']*mtcars$hp + model$coefficients['(Intercept)']
plt + geom_point() + geom_line(aes(y=yvals), color = "red")
lm(qsec ~ mpg + disp + drat + wt + hp, data=mtcars)
summary(lm(formula = qsec ~ mpg + disp + drat + wt + hp, data = mtcars))
setwd("~/GitHub/MechaCar_Statistical_Analysis")
MechaCar_mpg <- read.csv(MechaCar_mpg.csv, stringsAsFactors = F)
MechaCar_mpg <- read.csv("MechaCar_mpg.csv", stringsAsFactors = F)
head(MechaCar_mpg)
library(dplyr)
lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = MechaCar_mpg)
summary(lm(mpg ~ vehicle_length + vehicle_weight + spoiler_angle + ground_clearance + AWD, data = MechaCar_mpg))
Suspension_Coil_Table <- read.csv("Suspension_Coil.csv", stringsAsFactors = F)
head(Suspension_Coil_Table)
library(tidyverse)
?summariza()
?summarize()
total_summary = Suspension_Coil_Table %>% summarize(Mean=mean(PSI),Median=Median(PSI),Variance=var(PSI), SD=sd(PSI), .groups =  'keep')
total_summary = Suspension_Coil_Table %>% summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups =  'keep')
View(total_summary)
View(Suspension_Coil_Table)
lot_summary = Suspension_Coil_Table %>%
group_by(Manufacturing_Lot) %>%
summarize(Mean=mean(PSI),Median=median(PSI),Variance=var(PSI), SD=sd(PSI), .groups =  'keep')
View(lot_summary)
View(lot_summary)
View(lot_summary)
View(total_summary)
library(gridExtra)
?t.test()
Sample_Suspension_Coil <- Suspension_Coil_Table %>%
sample_n(50) # Generate 50 random sample table
t.test((Sample_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI))
t.test(log10((Sample_Suspension_Coil$PSI)),mu=mean(log10(Suspension_Coil_Table$PSI)))
t.test((Sample_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI))
lot1_Suspension_Coil <- Suspension_Coil_Table %>%
filter(Manufacturing_Lot == Lot1)
lot1_Suspension_Coil <- Suspension_Coil_Table %>%
filter(Manufacturing_Lot == 'Lot1')
View(lot1_Suspension_Coil)
lot2_Suspension_Coil <- Suspension_Coil_Table %>%
filter(Manufacturing_Lot == 'Lot2')
t.test((Sample_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI), subset(Sample_Suspension_Coil$Manufacturing_Lot))
t.test((Sample_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI), subset=Sample_Suspension_Coil$Manufacturing_Lot))
lot3_Suspension_Coil <- Suspension_Coil_Table %>%
filter(Manufacturing_Lot == 'Lot3')
t.test((lot1_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI))
t.test((lot2_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI))
t.test((lot3_Suspension_Coil$PSI),mu=mean(Suspension_Coil_Table$PSI))
